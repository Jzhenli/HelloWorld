name: Build and Compile Python Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows_x64:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Setup Environment
        run: |
          pip install briefcase==0.3.20 nuitka==1.0.6 ordered-set==4.1.0

      - name: compile app to pyd with nuitka
        run: |
          cd helloworld
          python -m nuitka --module src/helloworld/app --include-package=app --output-dir=dist --remove-output
          copy .\dist\*.pyd src\helloworld
          Remove-Item -Path 'src\helloworld\app' -Recurse -Force

      - name: package coode with briefcase
        run: |
          cd helloworld
          briefcase create
          briefcase build
          briefcase package -p zip

      - name: Upload Windows Executable
        uses: actions/upload-artifact@v4
        with:
          name: windows-executable
          path: helloworld/dist/*.zip

  build-linux_armv7:
    runs-on: ubuntu-latest
    env:
      QEMU_ARCH: arm
      QEMU_STATIC: /usr/bin/qemu-arm-static

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU and debootstrap
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static debootstrap

      - name: Set up ARM chroot environment (Bullseye OS)
        run: |
          sudo debootstrap --arch=armhf --variant=buildd bullseye /mnt/arm-rootfs http://raspbian.raspberrypi.org/raspbian/
          sudo cp /usr/bin/qemu-arm-static /mnt/arm-rootfs/usr/bin/
          sudo mount --bind /dev /mnt/arm-rootfs/dev
          sudo mount --bind /sys /mnt/arm-rootfs/sys
          sudo mount --bind /proc /mnt/arm-rootfs/proc

      - name: Install utilities in ARM chroot
        run: |
          # install deps for briefcase
          sudo chroot /mnt/arm-rootfs /bin/bash -c "apt-get update && apt-get install -y patchelf wget git build-essential pkg-config python3-dev python3-venv libgirepository1.0-dev libcairo2-dev gir1.2-gtk-3.0 libcanberra-gtk3-module"
          # Ensure 'pip' is installed for Python 3.9 in ARM chroot
          sudo chroot /mnt/arm-rootfs /bin/bash -c "wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py && rm get-pip.py"
          # Install Nuitka and briefcase in ARM chroot
          sudo chroot /mnt/arm-rootfs /bin/bash -c "pip3 install briefcase==0.3.20 nuitka==2.4.11 --extra-index-url https://www.piwheels.org/simple"

      - name: compile app to *.so with nuitka
        run: |
          sudo chroot /mnt/arm-rootfs /bin/bash -c "mkdir -p /github/workspace"
          sudo cp -r . /mnt/arm-rootfs/github/workspace
          # complie app to *.so file with nuitka
          sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/helloworld && python3 -m nuitka --module src/helloworld/app --include-package=app --output-dir=dist --remove-output"
          # repalce app folder with app.so in the source code
          sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/helloworld && cp dist/*.so src/helloworld/ && rm -rf src/helloworld/app"

      - name: packge code with briefcase
        run: |
          # package source code with briefcase
          sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/helloworld && briefcase create && briefcase build && briefcase package"

      - name: Copy ARM executable to host
        run: |
          sudo mkdir -p /github/workspace/dist/
          sudo cp /mnt/arm-rootfs/github/workspace/helloworld/dist/*.deb /github/workspace/dist/

      - name: Upload ARM Executable
        uses: actions/upload-artifact@v4
        with:
          name: arm-executable
          path: /github/workspace/dist/*.deb

      - name: Clean up chroot environment
        run: |
          if mountpoint -q /mnt/arm-rootfs/dev; then sudo umount /mnt/arm-rootfs/dev; fi
          if mountpoint -q /mnt/arm-rootfs/sys; then sudo umount /mnt/arm-rootfs/sys; fi
          if mountpoint -q /mnt/arm-rootfs/proc; then sudo umount /mnt/arm-rootfs/proc; fi
          if mountpoint -q /mnt/arm-rootfs; then sudo umount /mnt/arm-rootfs; fi
          sudo rm -rf /mnt/arm-rootfs  