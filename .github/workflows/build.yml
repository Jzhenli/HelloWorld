# name: Build and Compile Python Application

# on:
#   push:
#     tags:
#       - 'v*'  # 匹配以 'v' 开头的 Tag，例如 v1.0, v2.0 等

# env:
#   PROJECT_NAME: 'helloworld'

# jobs:
#   build-windows_x64:
#     runs-on: windows-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.10'

#       - name: Setup Environment
#         run: |
#           pip install briefcase==0.3.20 nuitka==1.0.6 ordered-set==4.1.0

#       - name: compile app to pyd with nuitka
#         shell: cmd
#         run: |
#           cd %PROJECT_NAME%
#           python -m nuitka --module src/%PROJECT_NAME%/app --include-package=app --output-dir=dist --remove-output
#           copy .\dist\*.pyd src\%PROJECT_NAME%
#           rmdir /S /Q src\%PROJECT_NAME%\app

#       - name: package coode with briefcase
#         shell: cmd
#         run: |
#           cd %PROJECT_NAME%
#           briefcase create
#           briefcase build
#           briefcase package -p zip

#       - name: Upload Windows Executable
#         uses: actions/upload-artifact@v4
#         with:
#           name: windows-executable
#           path: ${{ env.PROJECT_NAME }}/dist/*.zip

#   build-linux_armv7:
#     runs-on: ubuntu-latest
#     env:
#       QEMU_ARCH: arm
#       QEMU_STATIC: /usr/bin/qemu-arm-static

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up QEMU and debootstrap
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y qemu-user-static debootstrap

#       - name: Set up ARM chroot environment (Bullseye OS)
#         run: |
#           sudo debootstrap --arch=armhf --variant=buildd bullseye /mnt/arm-rootfs http://raspbian.raspberrypi.org/raspbian/
#           sudo cp /usr/bin/qemu-arm-static /mnt/arm-rootfs/usr/bin/
#           sudo mount --bind /dev /mnt/arm-rootfs/dev
#           sudo mount --bind /sys /mnt/arm-rootfs/sys
#           sudo mount --bind /proc /mnt/arm-rootfs/proc

#       - name: Install utilities in ARM chroot
#         run: |
#           # install deps for briefcase
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "apt-get update && apt-get install -y patchelf wget git build-essential pkg-config python3-dev python3-venv libgirepository1.0-dev libcairo2-dev gir1.2-gtk-3.0 libcanberra-gtk3-module"
#           # Ensure 'pip' is installed for Python 3.9 in ARM chroot
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "wget https://bootstrap.pypa.io/get-pip.py && python3 get-pip.py && rm get-pip.py"
#           # Install Nuitka and briefcase in ARM chroot
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "pip3 install briefcase==0.3.20 nuitka==2.4.11 --extra-index-url https://www.piwheels.org/simple"

#       - name: compile app to *.so with nuitka
#         run: |
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "mkdir -p /github/workspace"
#           sudo cp -r . /mnt/arm-rootfs/github/workspace
#           # complie app to *.so file with nuitka
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/$PROJECT_NAME && python3 -m nuitka --module src/$PROJECT_NAME/app --include-package=app --output-dir=dist --remove-output"
#           # repalce app folder with app.so in the source code
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/$PROJECT_NAME && cp dist/*.so src/$PROJECT_NAME/ && rm -rf src/$PROJECT_NAME/app"

#       - name: packge code with briefcase
#         run: |
#           # package source code with briefcase
#           sudo chroot /mnt/arm-rootfs /bin/bash -c "cd /github/workspace/$PROJECT_NAME && briefcase create && briefcase build && briefcase package"

#       - name: Copy ARM executable to host
#         run: |
#           sudo mkdir -p /github/workspace/dist/
#           sudo cp /mnt/arm-rootfs/github/workspace/$PROJECT_NAME/dist/*.deb /github/workspace/dist/

#       - name: Upload ARM Executable
#         uses: actions/upload-artifact@v4
#         with:
#           name: arm-executable
#           path: /github/workspace/dist/*.deb

#       - name: Clean up chroot environment
#         run: |
#           if mountpoint -q /mnt/arm-rootfs/dev; then sudo umount /mnt/arm-rootfs/dev; fi
#           if mountpoint -q /mnt/arm-rootfs/sys; then sudo umount /mnt/arm-rootfs/sys; fi
#           if mountpoint -q /mnt/arm-rootfs/proc; then sudo umount /mnt/arm-rootfs/proc; fi
#           if mountpoint -q /mnt/arm-rootfs; then sudo umount /mnt/arm-rootfs; fi
#           sudo rm -rf /mnt/arm-rootfs  




name: 'Test App' # empty name
on: [push, pull_request]
env:
  PROJECT_NAME: helloworld
jobs:
  # This is what is currently necessary to make termux-docker work with GHA.
  build-android-components:
    strategy:
      matrix:
        include:
          # - runner: ubuntu-24.04
          #   architecture: i686
          # - runner: ubuntu-24.04
          #   architecture: x86_64
          - runner: ubuntu-24.04-arm
            architecture: arm
          - runner: ubuntu-24.04-arm
            architecture: aarch64
    runs-on: ${{ matrix.runner }}
    # prepare writable volume prefix mount for actions/upload-artifact,
    # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
    # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
    container:
      image: termux/termux-docker:${{ matrix.architecture }}
      volumes: 
        - /tmp/node20:/__e/node20
    # approximate environment variables for actions that can't be forced to use entrypoint.sh
    env:
      TERMUX_MAIN_PACKAGE_FORMAT: debian
      ANDROID_ROOT: /system
      ANDROID_DATA: /data
      PREFIX: /data/data/com.termux/files/usr
      HOME: /data/data/com.termux/files/home
      PATH: /data/data/com.termux/files/usr/bin
      TMPDIR: /data/data/com.termux/files/usr/tmp
      LANG: en_US.UTF-8
      TZ: UTC
    steps:
      - name: set pkg command to use the packages-cf.termux.dev mirror
        run: ln -sf ${PREFIX}/etc/termux/mirrors/default ${PREFIX}/etc/termux/chosen_mirrors
      - name: upgrade all packages to prepare for installing nodejs
        run: /entrypoint.sh bash -c "yes | pkg upgrade -y"
      # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
      # executable bit actually set for all users, since even though that permissions restriction
      # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
      # source code doesn't "care" and would refuse to run the binary anyway.
      # relevant internal source code of GitHub Actions:
      # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
      - name: fix executable bit for all binaries in $PREFIX/bin for all users
        run: chmod -R o+x ${PREFIX}/bin
      - name: install bionic-libc nodejs to force compatibility with actions/checkout and actions/upload-artifact
        run: |
          /entrypoint.sh pkg install -y nodejs-lts
          ln -sf ${PREFIX}/bin /__e/node20/bin
      - uses: actions/checkout@v4
      - name: fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000)
        run: chown -R 1000:1000 .
      - name: setup
        run: |
          # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
          # the entrypoint.
          /entrypoint.sh pkg install -y ninja clang git patchelf ccache tur-repo
          /entrypoint.sh pkg i python3.10 -y
          ln -sf ${PREFIX}/bin/python3.10 ${PREFIX}/bin/python
          ln -sf ${PREFIX}/bin/pip3.10 ${PREFIX}/bin/pip
          # /entrypoint.sh pip install nuitka
      - name: build
        run: |
          python --version
          pip install nuitka
 
          mkdir dist
          cd "src/$PROJECT_NAME"
          python -m nuitka --module app --include-package=app --output-dir=dist --remove-output
          cp ./dist/*.so ../../dist/
          cd ../../dist/
          mv app.cpython-310.so app.so
          patchelf --set-rpath '' app.so
          patchelf --replace-needed  libpython3.10.so.1.0 libpython3.10.so app.so

      - uses: actions/upload-artifact@v4
        with:
          name: android-${{ matrix.architecture }}
          path: dist/*.so